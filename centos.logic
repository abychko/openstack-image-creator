#
set -e
#
LYNX=$(which lynx)
RPM=$(which rpm)
YUM=$(which yum)
#
if [ ${ARCH} = amd64 ]; then
  ARCH=x86_64
fi
#
if [ ${ARCH} = i386 ]; then
  cmdPREFIX="setarch ${ARCH}"
fi
#
MIRROR=http://mirror.centos.org/centos-${RELEASE}/${RELEASE}/os/${ARCH}
OPENSTACK_NEEDS="cloud-init cloud-utils-growpart dracut-modules-growroot"
IMAGE_NEEDS="git openssh openssh-server openssh-clients audit"
#
createTempYumConf(){
  echo "[main]
reposdir=${MOUNTDIR}/etc/yum.repos.d
exactarch=0
obsoletes=1
debuglevel=2
gpgcheck=0
" > /tmp/yum.conf
}
#
createImageYumConf(){
  mkdir -p ${MOUNTDIR}/etc/yum
  echo "[main]
cachedir=/var/cache/yum/${BASEARCH}/${RELEASE}
keepcache=0
debuglevel=2
logfile=/var/log/yum.log
exactarch=0
obsoletes=1
gpgcheck=1
plugins=1
distroverpkg=centos-release
" > ${MOUNTDIR}/etc/yum/yum.conf
}
#
installBaseSystem(){
  echo "* Installing Centos-${RELEASE}-${ARCH} system to ${MOUNTDIR}"
  mkdir -p ${MOUNTDIR}/var/lib/rpm
  ${RPM} --rebuilddb --root=${MOUNTDIR}
  CENTOS_RELEASE_RPM=$(lynx --dump ${MIRROR}/Packages | egrep -o "http.*centos-release-.*rpm")
  wget ${CENTOS_RELEASE_RPM} -O ${MOUNTDIR}/centos-release-${RELEASE}.rpm
  ${RPM} -i --root=${MOUNTDIR} --nodeps ${MOUNTDIR}/centos-release-${RELEASE}.rpm
  mkdir -p /etc/pki/rpm-gpg
  cp -av ${MOUNTDIR}/etc/pki/rpm-gpg/* /etc/pki/rpm-gpg
  createTempYumConf
  createImageYumConf
  ${cmdPREFIX} ${YUM} -y --config=/tmp/yum.conf --installroot=${MOUNTDIR} install rpm yum
  chroot ${MOUNTDIR} rpm -i --force --nodeps /centos-release-${RELEASE}.rpm
  rm -fv /tmp/yum.conf ${MOUNTDIR}/centos-release-${RELEASE}.rpm
  ${cmdPREFIX} chroot ${MOUNTDIR} yum -y groupinstall base
}
#
configureFSTab(){
# Setup fstab
  echo "# /etc/fstab: static file system information.
UUID=${UUID} /    ext4    noatime        1 1
tmpfs                   /dev/shm                tmpfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
" > ${MOUNTDIR}/etc/fstab
}
#
setLocale(){
  # set locale
  echo "LANG=en_US.UTF-8" > ${MOUNTDIR}/etc/sysconfig/i18n
  echo "SYSFONT=latarcyrheb-sun16" >> ${MOUNTDIR}/etc/sysconfig/i18n
}
#
createRepositories(){
#install EPEL repo
  ${cmdPREFIX} chroot ${MOUNTDIR} yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${RELEASE}.noarch.rpm
}
#
upgradeSystem(){
  ${cmdPREFIX} chroot ${MOUNTDIR} yum -y install dhclient sudo syslinux-extlinux dracut-fips dracut-fips-aesni
  ${cmdPREFIX} chroot ${MOUNTDIR} yum -y install selinux-policy selinux-policy-targeted acpid python-argparse kernel
  ${cmdPREFIX} chroot ${MOUNTDIR} yum -y install ${IMAGE_NEEDS}
  [[ ${OPENSTACK} = yes ]] && ${cmdPREFIX} chroot ${MOUNTDIR} yum -y install ${OPENSTACK_NEEDS}
  ${cmdPREFIX} chroot ${MOUNTDIR} yum -y upgrade
  ${cmdPREFIX} chroot ${MOUNTDIR} sed -i 's:SELINUX=enforcing:SELINUX=permissive:g' /etc/selinux/config
}
#
adjustCloudSettings(){
  if [[ ${OPENSTACK} = yes ]]; then
#Allow SSH in as root, even though it might be unsecure
    sed -i 's/disable_root: true/disable_root: false/' ${MOUNTDIR}/etc/cloud/cloud.cfg
    sed -i "s/name: centos/name: ${CLOUD_USER}/" ${MOUNTDIR}/etc/cloud/cloud.cfg
  fi
#Since we implemented backdoor we want to be able to use it :)
  sed -i 's/PermitRootLogin yes/PermitRootLogin without-password/' ${MOUNTDIR}/etc/ssh/sshd_config
# copy SKEL to root userdir
  cp -v ${MOUNTDIR}/etc/skel/.b* ${MOUNTDIR}/root/
#set timezone
  cp ${MOUNTDIR}/usr/share/zoneinfo/America/New_York ${MOUNTDIR}/etc/localtime
}
configureBoot(){
  KERNEL=$(chroot ${MOUNTDIR} find boot -name 'vmlinuz-*' | sort | tail -n 1)
  RAMDISK=$(chroot ${MOUNTDIR} find boot -name 'initramfs-*.img' | sort | tail -n 1)
  kVERSION=$(echo ${RAMDISK%.img} | awk -F'-' '{print $2"-"$3}')
  mkdir -p ${MOUNTDIR}/boot/extlinux
  extlinux --install ${MOUNTDIR}/boot/extlinux
  chroot ${MOUNTDIR} ln -snf . /boot/boot
  echo "default linux
timeout 10
label linux
kernel /${KERNEL}
append initrd=/${RAMDISK} root=UUID=${UUID} rootfstype=ext4 console=tty0 console=ttyS0,115200 net.ifnames=0 fips=0" > ${MOUNTDIR}/boot/extlinux/extlinux.conf
  ${cmdPREFIX} chroot ${MOUNTDIR} dracut --add-drivers "ahci virtio_pci virtio_blk virtio_scsi virtio_net virtio_ring virtio" -v -f /boot/initramfs-${kVERSION}.img ${kVERSION}
}
#
configureNetwork(){
  echo "
DEVICE=eth0
TYPE=Ethernet
BOOTPROTO=dhcp
ONBOOT=yes
" > ${MOUNTDIR}/etc/sysconfig/network-scripts/ifcfg-eth0
}
#
cleanupSystem(){
  echo "* removing SSH keys ..."
  rm -f ${MOUNTDIR}/etc/ssh/ssh_host_*
  echo "* removing UDEV persistent net rules ..."
  rm -fv ${MOUNTDIR}/etc/udev/rules.d/*-persistent-net.rules
  rm -fv ${MOUNTDIR}/lib*/udev/write_net_rules
  echo "* cleaning downloaded YUM data and packages ..."
  ${cmdPREFIX} chroot ${MOUNTDIR} yum clean all

  echo "/sbin/fixfiles -F restore" ${MOUNTDIR}/etc/rc.d/rc.local

  if [ ${RELEASE} -gt 6 ]; then
    rm -fr ${MOUNTDIR}/var/run
  fi
}
#
setupConsole(){
  echo "Setting up console params ..."
}
#
configureModules(){
  echo "#
blacklist i8xx_tco
blacklist aty128fb
blacklist atyfb
blacklist radeonfb
blacklist i810fb
blacklist cirrusfb
blacklist intelfb
blacklist kyrofb
blacklist i2c-matroxfb
blacklist hgafb
blacklist nvidiafb
blacklist rivafb
blacklist savagefb
blacklist sstfb
blacklist neofb
blacklist tridentfb
blacklist tdfxfb
blacklist virgefb
blacklist vga16fb
blacklist viafb
blacklist hisax
blacklist hisax_fcpcipnp
blacklist snd-pcsp
blacklist chsc_sch
" > ${MOUNTDIR}/etc/modprobe.d/blacklist.conf

#
  echo "# Required for cinder hotplug
acpiphp
pci_hotplug
" >> ${MOUNTDIR}/etc/modules
}
#
setHostname(){
  echo "NETWORKING=yes" > ${MOUNTDIR}/etc/sysconfig/network
  if [[ ${OPENSTACK} = yes ]]; then
    HOSTNAME="${DISTRO}.${RELEASE}.openstack"
  else
    HOSTNAME="${DISTRO}.${RELEASE}.virtual"
  fi
    echo "${HOSTNAME}" >> ${MOUNTDIR}/etc/sysconfig/network
}
#
createCloudUser(){
  echo "* adding cloud user ${CLOUD_USER} ..."
  ${cmdPREFIX} chroot ${MOUNTDIR} adduser --create-home --shell /bin/bash --user-group --comment ${DISTRO}-cloud-user ${CLOUD_USER}
}
#
